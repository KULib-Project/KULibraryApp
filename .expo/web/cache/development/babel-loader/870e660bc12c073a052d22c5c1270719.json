{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.discovery = void 0;\nexports.useAuthRequest = useAuthRequest;\nexports.useIdTokenAuthRequest = useIdTokenAuthRequest;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar Application = _interopRequireWildcard(require(\"expo-application\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _AuthRequestHooks = require(\"../AuthRequestHooks\");\n\nvar _AuthSession = require(\"../AuthSession\");\n\nvar _TokenRequest = require(\"../TokenRequest\");\n\nvar _ProviderUtils = require(\"./ProviderUtils\");\n\nvar _excluded = [\"language\", \"loginHint\", \"selectAccount\", \"extraParams\", \"clientSecret\"],\n    _excluded2 = [\"extraParams\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar settings = {\n  windowFeatures: {\n    width: 515,\n    height: 680\n  },\n  minimumScopes: ['openid', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email']\n};\nvar discovery = {\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n  tokenEndpoint: 'https://oauth2.googleapis.com/token',\n  revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n  userInfoEndpoint: 'https://openidconnect.googleapis.com/v1/userinfo'\n};\nexports.discovery = discovery;\n\nvar GoogleAuthRequest = function (_AuthRequest) {\n  (0, _inherits2.default)(GoogleAuthRequest, _AuthRequest);\n\n  var _super = _createSuper(GoogleAuthRequest);\n\n  function GoogleAuthRequest(_ref) {\n    var language = _ref.language,\n        loginHint = _ref.loginHint,\n        selectAccount = _ref.selectAccount,\n        _ref$extraParams = _ref.extraParams,\n        extraParams = _ref$extraParams === void 0 ? {} : _ref$extraParams,\n        clientSecret = _ref.clientSecret,\n        config = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n    (0, _classCallCheck2.default)(this, GoogleAuthRequest);\n    var inputParams = (0, _extends2.default)({}, extraParams);\n    if (language) inputParams.hl = language;\n    if (loginHint) inputParams.login_hint = loginHint;\n    if (selectAccount) inputParams.prompt = _AuthSession.Prompt.SelectAccount;\n    var scopes = (0, _ProviderUtils.applyRequiredScopes)(config.scopes, settings.minimumScopes);\n    var isImplicit = config.responseType === _AuthSession.ResponseType.Token || config.responseType === _AuthSession.ResponseType.IdToken;\n\n    if (isImplicit) {\n      config.usePKCE = false;\n    }\n\n    var inputClientSecret;\n\n    if (config.responseType && config.responseType !== _AuthSession.ResponseType.Code) {\n      inputClientSecret = clientSecret;\n    }\n\n    return _super.call(this, (0, _extends2.default)({}, config, {\n      clientSecret: inputClientSecret,\n      scopes: scopes,\n      extraParams: inputParams\n    }));\n  }\n\n  (0, _createClass2.default)(GoogleAuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      var _await$_get$call, _await$_get$call$extr, extraParams, config;\n\n      return _regenerator.default.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap((0, _get2.default)((0, _getPrototypeOf2.default)(GoogleAuthRequest.prototype), \"getAuthRequestConfigAsync\", this).call(this));\n\n            case 2:\n              _await$_get$call = _context.sent;\n              _await$_get$call$extr = _await$_get$call.extraParams;\n              extraParams = _await$_get$call$extr === void 0 ? {} : _await$_get$call$extr;\n              config = (0, _objectWithoutProperties2.default)(_await$_get$call, _excluded2);\n\n              if (!(config.responseType === _AuthSession.ResponseType.IdToken && !extraParams.nonce && !this.nonce)) {\n                _context.next = 12;\n                break;\n              }\n\n              if (this.nonce) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 10;\n              return _regenerator.default.awrap((0, _AuthSession.generateHexStringAsync)(16));\n\n            case 10:\n              this.nonce = _context.sent;\n\n            case 11:\n              extraParams.nonce = this.nonce;\n\n            case 12:\n              return _context.abrupt(\"return\", (0, _extends2.default)({}, config, {\n                extraParams: extraParams\n              }));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return GoogleAuthRequest;\n}(_AuthSession.AuthRequest);\n\nfunction useIdTokenAuthRequest(config) {\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var useProxy = (0, _ProviderUtils.useProxyEnabled)(redirectUriOptions);\n  var isWebAuth = useProxy || _reactNative.Platform.OS === 'web';\n  return useAuthRequest((0, _extends2.default)({}, config, {\n    responseType: !config.clientSecret && isWebAuth ? _AuthSession.ResponseType.IdToken : undefined\n  }), (0, _extends2.default)({}, redirectUriOptions, {\n    useProxy: useProxy\n  }));\n}\n\nfunction useAuthRequest() {\n  var _config$scopes;\n\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var redirectUriOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var useProxy = (0, _ProviderUtils.useProxyEnabled)(redirectUriOptions);\n  var clientId = (0, _react.useMemo)(function () {\n    var _config$propertyName;\n\n    var propertyName = useProxy ? 'expoClientId' : _reactNative.Platform.select({\n      ios: 'iosClientId',\n      android: 'androidClientId',\n      default: 'webClientId'\n    });\n    var clientId = (_config$propertyName = config[propertyName]) != null ? _config$propertyName : config.clientId;\n    (0, _ProviderUtils.invariantClientId)(propertyName, clientId, 'Google');\n    return clientId;\n  }, [useProxy, config.expoClientId, config.iosClientId, config.androidClientId, config.webClientId, config.clientId]);\n  var responseType = (0, _react.useMemo)(function () {\n    if (typeof config.responseType !== 'undefined') {\n      return config.responseType;\n    }\n\n    var isInstalledApp = _reactNative.Platform.OS !== 'web' && !useProxy;\n\n    if (config.clientSecret || isInstalledApp) {\n      return _AuthSession.ResponseType.Code;\n    }\n\n    return _AuthSession.ResponseType.Token;\n  }, [config.responseType, config.clientSecret, useProxy]);\n  var redirectUri = (0, _react.useMemo)(function () {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n\n    return (0, _AuthSession.makeRedirectUri)((0, _extends2.default)({\n      native: Application.applicationId + \":/oauthredirect\",\n      useProxy: useProxy\n    }, redirectUriOptions));\n  }, [useProxy, config.redirectUri, redirectUriOptions]);\n  var extraParams = (0, _react.useMemo)(function () {\n    var output = config.extraParams ? (0, _extends2.default)({}, config.extraParams) : {};\n\n    if (config.language) {\n      output.hl = output.language;\n    }\n\n    if (config.loginHint) {\n      output.login_hint = output.loginHint;\n    }\n\n    if (config.selectAccount) {\n      output.prompt = _AuthSession.Prompt.SelectAccount;\n    }\n\n    return output;\n  }, [config.extraParams, config.language, config.loginHint, config.selectAccount]);\n  var request = (0, _AuthRequestHooks.useLoadedAuthRequest)((0, _extends2.default)({}, config, {\n    responseType: responseType,\n    extraParams: extraParams,\n    clientId: clientId,\n    redirectUri: redirectUri\n  }), discovery, GoogleAuthRequest);\n\n  var _useAuthRequestResult = (0, _AuthRequestHooks.useAuthRequestResult)(request, discovery, {\n    useProxy: useProxy,\n    windowFeatures: settings.windowFeatures\n  }),\n      _useAuthRequestResult2 = (0, _slicedToArray2.default)(_useAuthRequestResult, 2),\n      result = _useAuthRequestResult2[0],\n      promptAsync = _useAuthRequestResult2[1];\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      fullResult = _useState2[0],\n      setFullResult = _useState2[1];\n\n  var shouldAutoExchangeCode = (0, _react.useMemo)(function () {\n    if (typeof config.shouldAutoExchangeCode !== 'undefined') {\n      return config.shouldAutoExchangeCode;\n    }\n\n    return (result == null ? void 0 : result.type) === 'success' && result.params.code && !result.authentication;\n  }, [config.shouldAutoExchangeCode, result == null ? void 0 : result.type]);\n  (0, _react.useEffect)(function () {\n    var isMounted = true;\n\n    if (shouldAutoExchangeCode && (result == null ? void 0 : result.type) === 'success') {\n      var exchangeRequest = new _TokenRequest.AccessTokenRequest({\n        clientId: clientId,\n        clientSecret: config.clientSecret,\n        redirectUri: redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          code_verifier: (request == null ? void 0 : request.codeVerifier) || ''\n        }\n      });\n      exchangeRequest.performAsync(discovery).then(function (authentication) {\n        if (isMounted) {\n          setFullResult((0, _extends2.default)({}, result, {\n            params: (0, _extends2.default)({\n              id_token: (authentication == null ? void 0 : authentication.idToken) || '',\n              access_token: authentication.accessToken\n            }, result.params),\n            authentication: authentication\n          }));\n        }\n      });\n    } else {\n      setFullResult(result);\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, [clientId, redirectUri, shouldAutoExchangeCode, config.clientSecret, (_config$scopes = config.scopes) == null ? void 0 : _config$scopes.join(','), request == null ? void 0 : request.codeVerifier, result]);\n  return [request, fullResult, promptAsync];\n}","map":{"version":3,"sources":["../../src/providers/Google.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAYA;;AAEA;;;;;;;;;;;;;AAEA,IAAM,QAAQ,GAAG;EACf,cAAc,EAAE;IAAE,KAAK,EAAE,GAAT;IAAc,MAAM,EAAE;EAAtB,CADD;EAEf,aAAa,EAAE,CACb,QADa,EAEb,kDAFa,EAGb,gDAHa;AAFA,CAAjB;AASO,IAAM,SAAS,GAAsB;EAC1C,qBAAqB,EAAE,8CADmB;EAE1C,aAAa,EAAE,qCAF2B;EAG1C,kBAAkB,EAAE,sCAHsB;EAI1C,gBAAgB,EAAE;AAJwB,CAArC;;;IAoFD,iB;;;;;EAGJ,iCAO0B;IAAA,IANxB,QAMwB,QANxB,QAMwB;IAAA,IALxB,SAKwB,QALxB,SAKwB;IAAA,IAJxB,aAIwB,QAJxB,aAIwB;IAAA,4BAHxB,WAGwB;IAAA,IAHxB,WAGwB,iCAHV,EAGU;IAAA,IAFxB,YAEwB,QAFxB,YAEwB;IAAA,IADrB,MACqB;IAAA;IACxB,IAAM,WAAW,8BACZ,WADY,CAAjB;IAGA,IAAI,QAAJ,EAAc,WAAW,CAAC,EAAZ,GAAiB,QAAjB;IACd,IAAI,SAAJ,EAAe,WAAW,CAAC,UAAZ,GAAyB,SAAzB;IACf,IAAI,aAAJ,EAAmB,WAAW,CAAC,MAAZ,GAAqB,mBAAA,CAAO,aAA5B;IAGnB,IAAM,MAAM,GAAG,IAAA,kCAAA,EAAoB,MAAM,CAAC,MAA3B,EAAmC,QAAQ,CAAC,aAA5C,CAAf;IACA,IAAM,UAAU,GACd,MAAM,CAAC,YAAP,KAAwB,yBAAA,CAAa,KAArC,IAA8C,MAAM,CAAC,YAAP,KAAwB,yBAAA,CAAa,OADrF;;IAEA,IAAI,UAAJ,EAAgB;MAEd,MAAM,CAAC,OAAP,GAAiB,KAAjB;IACD;;IACD,IAAI,iBAAJ;;IAEA,IAAI,MAAM,CAAC,YAAP,IAAuB,MAAM,CAAC,YAAP,KAAwB,yBAAA,CAAa,IAAhE,EAAsE;MAEpE,iBAAiB,GAAG,YAApB;IACD;;IArBuB,oDAuBnB,MAvBmB;MAwBtB,YAAY,EAAE,iBAxBQ;MAyBtB,MAAM,EAAN,MAzBsB;MA0BtB,WAAW,EAAE;IA1BS;EA4BzB;;;;WAKD;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA,yCACU,WADV;cACU,WADV,sCACwB,EADxB;cAC+B,MAD/B;;cAAA,MAEM,MAAM,CAAC,YAAP,KAAwB,yBAAA,CAAa,OAArC,IAAgD,CAAC,WAAW,CAAC,KAA7D,IAAsE,CAAC,KAAK,KAFlF;gBAAA;gBAAA;cAAA;;cAAA,IAGS,KAAK,KAHd;gBAAA;gBAAA;cAAA;;cAAA;cAAA,kCAIyB,IAAA,mCAAA,EAAuB,EAAvB,CAJzB;;YAAA;cAIM,KAAK,KAJX;;YAAA;cAMI,WAAW,CAAC,KAAZ,GAAoB,KAAK,KAAzB;;YANJ;cAAA,4DASO,MATP;gBAUI,WAAW,EAAX;cAVJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;EA3C8B,wB;;AAuE1B,SAAU,qBAAV,CACJ,MADI,EAE2D;EAAA,IAA/D,kBAA+D,uEAAF,EAAE;EAM/D,IAAM,QAAQ,GAAG,IAAA,8BAAA,EAAgB,kBAAhB,CAAjB;EAEA,IAAM,SAAS,GAAG,QAAQ,IAAI,qBAAA,CAAS,EAAT,KAAgB,KAA9C;EAEA,OAAO,cAAc,4BAEd,MAFc;IAGjB,YAAY,EAEV,CAAC,MAAM,CAAC,YAAR,IAEA,SAFA,GAGI,yBAAA,CAAa,OAHjB,GAII;EATW,+BAWd,kBAXc;IAWM,QAAQ,EAAR;EAXN,GAArB;AAaD;;AAYK,SAAU,cAAV,GAE2D;EAAA;;EAAA,IAD/D,MAC+D,uEADpB,EACoB;EAAA,IAA/D,kBAA+D,uEAAF,EAAE;EAM/D,IAAM,QAAQ,GAAG,IAAA,8BAAA,EAAgB,kBAAhB,CAAjB;EAEA,IAAM,QAAQ,GAAG,IAAA,cAAA,EAAQ,YAAa;IAAA;;IACpC,IAAM,YAAY,GAAG,QAAQ,GACzB,cADyB,GAEzB,qBAAA,CAAS,MAAT,CAAgB;MACd,GAAG,EAAE,aADS;MAEd,OAAO,EAAE,iBAFK;MAGd,OAAO,EAAE;IAHK,CAAhB,CAFJ;IAQA,IAAM,QAAQ,2BAAG,MAAM,CAAC,YAAD,CAAT,mCAAkC,MAAM,CAAC,QAAvD;IACA,IAAA,gCAAA,EAAkB,YAAlB,EAAgC,QAAhC,EAA0C,QAA1C;IACA,OAAO,QAAP;EACD,CAZgB,EAYd,CACD,QADC,EAED,MAAM,CAAC,YAFN,EAGD,MAAM,CAAC,WAHN,EAID,MAAM,CAAC,eAJN,EAKD,MAAM,CAAC,WALN,EAMD,MAAM,CAAC,QANN,CAZc,CAAjB;EAqBA,IAAM,YAAY,GAAG,IAAA,cAAA,EAAQ,YAAK;IAEhC,IAAI,OAAO,MAAM,CAAC,YAAd,KAA+B,WAAnC,EAAgD;MAC9C,OAAO,MAAM,CAAC,YAAd;IACD;;IAGD,IAAM,cAAc,GAAG,qBAAA,CAAS,EAAT,KAAgB,KAAhB,IAAyB,CAAC,QAAjD;;IAEA,IAAI,MAAM,CAAC,YAAP,IAAuB,cAA3B,EAA2C;MACzC,OAAO,yBAAA,CAAa,IAApB;IACD;;IAED,OAAO,yBAAA,CAAa,KAApB;EACD,CAdoB,EAclB,CAAC,MAAM,CAAC,YAAR,EAAsB,MAAM,CAAC,YAA7B,EAA2C,QAA3C,CAdkB,CAArB;EAgBA,IAAM,WAAW,GAAG,IAAA,cAAA,EAAQ,YAAa;IACvC,IAAI,OAAO,MAAM,CAAC,WAAd,KAA8B,WAAlC,EAA+C;MAC7C,OAAO,MAAM,CAAC,WAAd;IACD;;IAED,OAAO,IAAA,4BAAA;MACL,MAAM,EAAK,WAAW,CAAC,aAAjB,oBADD;MAEL,QAAQ,EAAR;IAFK,GAGF,kBAHE,EAAP;EAMD,CAXmB,EAWjB,CAAC,QAAD,EAAW,MAAM,CAAC,WAAlB,EAA+B,kBAA/B,CAXiB,CAApB;EAaA,IAAM,WAAW,GAAG,IAAA,cAAA,EAAQ,YAA6C;IACvE,IAAM,MAAM,GAAG,MAAM,CAAC,WAAP,8BAA0B,MAAM,CAAC,WAAjC,IAAiD,EAAhE;;IAEA,IAAI,MAAM,CAAC,QAAX,EAAqB;MACnB,MAAM,CAAC,EAAP,GAAY,MAAM,CAAC,QAAnB;IACD;;IACD,IAAI,MAAM,CAAC,SAAX,EAAsB;MACpB,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,SAA3B;IACD;;IACD,IAAI,MAAM,CAAC,aAAX,EAA0B;MACxB,MAAM,CAAC,MAAP,GAAgB,mBAAA,CAAO,aAAvB;IACD;;IACD,OAAO,MAAP;EACD,CAbmB,EAajB,CAAC,MAAM,CAAC,WAAR,EAAqB,MAAM,CAAC,QAA5B,EAAsC,MAAM,CAAC,SAA7C,EAAwD,MAAM,CAAC,aAA/D,CAbiB,CAApB;EAeA,IAAM,OAAO,GAAG,IAAA,sCAAA,6BAET,MAFS;IAGZ,YAAY,EAAZ,YAHY;IAIZ,WAAW,EAAX,WAJY;IAKZ,QAAQ,EAAR,QALY;IAMZ,WAAW,EAAX;EANY,IAQd,SARc,EASd,iBATc,CAAhB;;EAYA,4BAA8B,IAAA,sCAAA,EAAqB,OAArB,EAA8B,SAA9B,EAAyC;IACrE,QAAQ,EAAR,QADqE;IAErE,cAAc,EAAE,QAAQ,CAAC;EAF4C,CAAzC,CAA9B;EAAA;EAAA,IAAO,MAAP;EAAA,IAAe,WAAf;;EAKA,gBAAoC,IAAA,eAAA,EAAmC,IAAnC,CAApC;EAAA;EAAA,IAAO,UAAP;EAAA,IAAmB,aAAnB;;EAEA,IAAM,sBAAsB,GAAG,IAAA,cAAA,EAAQ,YAAK;IAE1C,IAAI,OAAO,MAAM,CAAC,sBAAd,KAAyC,WAA7C,EAA0D;MACxD,OAAO,MAAM,CAAC,sBAAd;IACD;;IAGD,OAAO,CAAA,MAAM,QAAN,YAAA,MAAM,CAAE,IAAR,MAAiB,SAAjB,IAA8B,MAAM,CAAC,MAAP,CAAc,IAA5C,IAAoD,CAAC,MAAM,CAAC,cAAnE;EACD,CAR8B,EAQ5B,CAAC,MAAM,CAAC,sBAAR,EAAgC,MAAhC,oBAAgC,MAAM,CAAE,IAAxC,CAR4B,CAA/B;EAUA,IAAA,gBAAA,EAAU,YAAK;IACb,IAAI,SAAS,GAAG,IAAhB;;IACA,IAAI,sBAAsB,IAAI,CAAA,MAAM,QAAN,YAAA,MAAM,CAAE,IAAR,MAAiB,SAA/C,EAA0D;MACxD,IAAM,eAAe,GAAG,IAAI,gCAAJ,CAAuB;QAC7C,QAAQ,EAAR,QAD6C;QAE7C,YAAY,EAAE,MAAM,CAAC,YAFwB;QAG7C,WAAW,EAAX,WAH6C;QAI7C,MAAM,EAAE,MAAM,CAAC,MAJ8B;QAK7C,IAAI,EAAE,MAAM,CAAC,MAAP,CAAc,IALyB;QAM7C,WAAW,EAAE;UACX,aAAa,EAAE,CAAA,OAAO,QAAP,YAAA,OAAO,CAAE,YAAT,KAAyB;QAD7B;MANgC,CAAvB,CAAxB;MAUA,eAAe,CAAC,YAAhB,CAA6B,SAA7B,EAAwC,IAAxC,CAA6C,UAAC,cAAD,EAAmB;QAC9D,IAAI,SAAJ,EAAe;UACb,aAAa,4BACR,MADQ;YAEX,MAAM;cACJ,QAAQ,EAAE,CAAA,cAAc,QAAd,YAAA,cAAc,CAAE,OAAhB,KAA2B,EADjC;cAEJ,YAAY,EAAE,cAAc,CAAC;YAFzB,GAGD,MAAM,CAAC,MAHN,CAFK;YAOX,cAAc,EAAd;UAPW,GAAb;QASD;MACF,CAZD;IAaD,CAxBD,MAwBO;MACL,aAAa,CAAC,MAAD,CAAb;IACD;;IACD,OAAO,YAAK;MACV,SAAS,GAAG,KAAZ;IACD,CAFD;EAGD,CAhCD,EAgCG,CACD,QADC,EAED,WAFC,EAGD,sBAHC,EAID,MAAM,CAAC,YAJN,oBAKD,MAAM,CAAC,MALN,qBAKD,eAAe,IAAf,CAAoB,GAApB,CALC,EAMD,OANC,oBAMD,OAAO,CAAE,YANR,EAOD,MAPC,CAhCH;EA0CA,OAAO,CAAC,OAAD,EAAU,UAAV,EAAsB,WAAtB,CAAP;AACD","sourcesContent":["import * as Application from 'expo-application';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Platform } from 'react-native';\n\nimport { useAuthRequestResult, useLoadedAuthRequest } from '../AuthRequestHooks';\nimport {\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  DiscoveryDocument,\n  generateHexStringAsync,\n  makeRedirectUri,\n  Prompt,\n  ResponseType,\n} from '../AuthSession';\nimport { AccessTokenRequest } from '../TokenRequest';\nimport { ProviderAuthRequestConfig } from './Provider.types';\nimport { applyRequiredScopes, invariantClientId, useProxyEnabled } from './ProviderUtils';\n\nconst settings = {\n  windowFeatures: { width: 515, height: 680 },\n  minimumScopes: [\n    'openid',\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'https://www.googleapis.com/auth/userinfo.email',\n  ],\n};\n\nexport const discovery: DiscoveryDocument = {\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n  tokenEndpoint: 'https://oauth2.googleapis.com/token',\n  revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n  userInfoEndpoint: 'https://openidconnect.googleapis.com/v1/userinfo',\n};\n\nexport interface GoogleAuthRequestConfig extends ProviderAuthRequestConfig {\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * When `true`, the service will allow the user to switch between accounts (if possible). Defaults to `false`.\n   */\n  selectAccount?: boolean;\n  /**\n   * Proxy client ID for use in the Expo client on iOS and Android.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: Web Application\n   * - **URIs**: https://auth.expo.io\n   * - **Authorized redirect URIs**: https://auth.expo.io/@your-username/your-project-slug\n   */\n  expoClientId?: string;\n  /**\n   * Expo web client ID for use in the browser.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: Web Application\n   * - Give it a name (e.g. \"Web App\").\n   * - **URIs** (Authorized JavaScript origins): https://localhost:19006 & https://yourwebsite.com\n   * - **Authorized redirect URIs**: https://localhost:19006 & https://yourwebsite.com\n   * - To test this be sure to start your app with `expo start:web --https`.\n   */\n  webClientId?: string;\n  /**\n   * iOS native client ID for use in standalone, bare workflow, and custom clients.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: iOS Application\n   * - Give it a name (e.g. \"iOS App\").\n   * - **Bundle ID**: Must match the value of `ios.bundleIdentifier` in your `app.json`.\n   * - Your app needs to conform to the URI scheme matching your bundle identifier.\n   *   - _Standalone_: Automatically added, do nothing.\n   *   - _Bare workflow_: Run `npx uri-scheme add <your bundle id> --ios`\n   * - To test this you can:\n   *   1. Eject to bare: `expo eject` and run `yarn ios`\n   *   2. Create a custom client: `expo client:ios`\n   *   3. Build a production IPA: `expo build:ios`\n   * - Whenever you change the values in `app.json` you'll need to rebuild the native app.\n   */\n  iosClientId?: string;\n  /**\n   * Android native client ID for use in standalone, and bare workflow.\n   *\n   * This Google Client ID must be setup as follows:\n   *\n   * - **Application Type**: Android Application\n   * - Give it a name (e.g. \"Android App\").\n   * - **Package name**: Must match the value of `android.package` in your `app.json`.\n   * - Your app needs to conform to the URI scheme matching your `android.package` (ex. `com.myname.mycoolapp:/`).\n   *   - _Standalone_: Automatically added, do nothing.\n   *   - _Bare workflow_: Run `npx uri-scheme add <your android.package> --android`\n   * - **Signing-certificate fingerprint**:\n   *   - Run `expo credentials:manager -p android` then select \"Update upload Keystore\" -> \"Generate new keystore\" -> \"Go back to experience overview\"\n   *   - Copy your \"Google Certificate Fingerprint\", it will output a string that looks like `A1:B2:C3` but longer.\n   * - To test this you can:\n   *   1. Eject to bare: `expo eject` and run `yarn ios`\n   *   2. Build a production IPA: `expo build:android`\n   */\n  androidClientId?: string;\n  /**\n   * Should the hook automatically exchange the response code for an authentication token.\n   *\n   * Defaults to true on installed apps (iOS, Android) when `ResponseType.Code` is used (default).\n   */\n  shouldAutoExchangeCode?: boolean;\n}\n\nclass GoogleAuthRequest extends AuthRequest {\n  nonce?: string;\n\n  constructor({\n    language,\n    loginHint,\n    selectAccount,\n    extraParams = {},\n    clientSecret,\n    ...config\n  }: GoogleAuthRequestConfig) {\n    const inputParams = {\n      ...extraParams,\n    };\n    if (language) inputParams.hl = language;\n    if (loginHint) inputParams.login_hint = loginHint;\n    if (selectAccount) inputParams.prompt = Prompt.SelectAccount;\n\n    // Apply the default scopes\n    const scopes = applyRequiredScopes(config.scopes, settings.minimumScopes);\n    const isImplicit =\n      config.responseType === ResponseType.Token || config.responseType === ResponseType.IdToken;\n    if (isImplicit) {\n      // PKCE must be disabled in implicit mode.\n      config.usePKCE = false;\n    }\n    let inputClientSecret: string | undefined;\n    //  Google will throw if you attempt to use the client secret\n    if (config.responseType && config.responseType !== ResponseType.Code) {\n      // TODO: maybe warn that you shouldn't store the client secret on the client\n      inputClientSecret = clientSecret;\n    }\n    super({\n      ...config,\n      clientSecret: inputClientSecret,\n      scopes,\n      extraParams: inputParams,\n    });\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    const { extraParams = {}, ...config } = await super.getAuthRequestConfigAsync();\n    if (config.responseType === ResponseType.IdToken && !extraParams.nonce && !this.nonce) {\n      if (!this.nonce) {\n        this.nonce = await generateHexStringAsync(16);\n      }\n      extraParams.nonce = this.nonce;\n    }\n    return {\n      ...config,\n      extraParams,\n    };\n  }\n}\n\n/**\n * Load an authorization request with an ID Token for authentication with Firebase.\n *\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * The id token can be retrieved with `response.params.id_token`.\n *\n * - [Get Started](https://docs.expo.io/guides/authentication/#google)\n *\n * @param config\n * @param redirectUriOptions\n */\nexport function useIdTokenAuthRequest(\n  config: Partial<GoogleAuthRequestConfig>,\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  GoogleAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const useProxy = useProxyEnabled(redirectUriOptions);\n\n  const isWebAuth = useProxy || Platform.OS === 'web';\n\n  return useAuthRequest(\n    {\n      ...config,\n      responseType:\n        // If the client secret is provided then code can be used\n        !config.clientSecret &&\n        // When web auth is used, we can request the `id_token` directly without exchanging a code.\n        isWebAuth\n          ? ResponseType.IdToken\n          : undefined,\n    },\n    { ...redirectUriOptions, useProxy }\n  );\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes, then the response will be fulfilled.\n *\n * - [Get Started](https://docs.expo.io/guides/authentication/#google)\n *\n * @param config\n * @param redirectUriOptions\n */\nexport function useAuthRequest(\n  config: Partial<GoogleAuthRequestConfig> = {},\n  redirectUriOptions: Partial<AuthSessionRedirectUriOptions> = {}\n): [\n  GoogleAuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const useProxy = useProxyEnabled(redirectUriOptions);\n\n  const clientId = useMemo((): string => {\n    const propertyName = useProxy\n      ? 'expoClientId'\n      : Platform.select({\n          ios: 'iosClientId',\n          android: 'androidClientId',\n          default: 'webClientId',\n        });\n\n    const clientId = config[propertyName as any] ?? config.clientId;\n    invariantClientId(propertyName, clientId, 'Google');\n    return clientId;\n  }, [\n    useProxy,\n    config.expoClientId,\n    config.iosClientId,\n    config.androidClientId,\n    config.webClientId,\n    config.clientId,\n  ]);\n\n  const responseType = useMemo(() => {\n    // Allow overrides.\n    if (typeof config.responseType !== 'undefined') {\n      return config.responseType;\n    }\n    // You can only use `response_token=code` on installed apps (iOS, Android without proxy).\n    // Installed apps can auto exchange without a client secret and get the token and id-token (Firebase).\n    const isInstalledApp = Platform.OS !== 'web' && !useProxy;\n    // If the user provided the client secret (they shouldn't!) then use code exchange by default.\n    if (config.clientSecret || isInstalledApp) {\n      return ResponseType.Code;\n    }\n    // This seems the most pragmatic option since it can result in a full authentication on web and proxy platforms as expected.\n    return ResponseType.Token;\n  }, [config.responseType, config.clientSecret, useProxy]);\n\n  const redirectUri = useMemo((): string => {\n    if (typeof config.redirectUri !== 'undefined') {\n      return config.redirectUri;\n    }\n\n    return makeRedirectUri({\n      native: `${Application.applicationId}:/oauthredirect`,\n      useProxy,\n      ...redirectUriOptions,\n      // native: `com.googleusercontent.apps.${guid}:/oauthredirect`,\n    });\n  }, [useProxy, config.redirectUri, redirectUriOptions]);\n\n  const extraParams = useMemo((): GoogleAuthRequestConfig['extraParams'] => {\n    const output = config.extraParams ? { ...config.extraParams } : {};\n\n    if (config.language) {\n      output.hl = output.language;\n    }\n    if (config.loginHint) {\n      output.login_hint = output.loginHint;\n    }\n    if (config.selectAccount) {\n      output.prompt = Prompt.SelectAccount;\n    }\n    return output;\n  }, [config.extraParams, config.language, config.loginHint, config.selectAccount]);\n\n  const request = useLoadedAuthRequest(\n    {\n      ...config,\n      responseType,\n      extraParams,\n      clientId,\n      redirectUri,\n    },\n    discovery,\n    GoogleAuthRequest\n  );\n\n  const [result, promptAsync] = useAuthRequestResult(request, discovery, {\n    useProxy,\n    windowFeatures: settings.windowFeatures,\n  });\n\n  const [fullResult, setFullResult] = useState<AuthSessionResult | null>(null);\n\n  const shouldAutoExchangeCode = useMemo(() => {\n    // allow overrides\n    if (typeof config.shouldAutoExchangeCode !== 'undefined') {\n      return config.shouldAutoExchangeCode;\n    }\n\n    // has a code to exchange and doesn't have an authentication yet.\n    return result?.type === 'success' && result.params.code && !result.authentication;\n  }, [config.shouldAutoExchangeCode, result?.type]);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (shouldAutoExchangeCode && result?.type === 'success') {\n      const exchangeRequest = new AccessTokenRequest({\n        clientId,\n        clientSecret: config.clientSecret,\n        redirectUri,\n        scopes: config.scopes,\n        code: result.params.code,\n        extraParams: {\n          code_verifier: request?.codeVerifier || '',\n        },\n      });\n      exchangeRequest.performAsync(discovery).then((authentication) => {\n        if (isMounted) {\n          setFullResult({\n            ...result,\n            params: {\n              id_token: authentication?.idToken || '',\n              access_token: authentication.accessToken,\n              ...result.params,\n            },\n            authentication,\n          });\n        }\n      });\n    } else {\n      setFullResult(result);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    clientId,\n    redirectUri,\n    shouldAutoExchangeCode,\n    config.clientSecret,\n    config.scopes?.join(','),\n    request?.codeVerifier,\n    result,\n  ]);\n\n  return [request, fullResult, promptAsync];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}