{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyRequiredScopes = applyRequiredScopes;\nexports.invariantClientId = invariantClientId;\nexports.shouldUseProxy = shouldUseProxy;\nexports.useProxyEnabled = useProxyEnabled;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _expoConstants = _interopRequireWildcard(require(\"expo-constants\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction applyRequiredScopes() {\n  var scopes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var requiredScopes = arguments.length > 1 ? arguments[1] : undefined;\n  return (0, _toConsumableArray2.default)(new Set([].concat((0, _toConsumableArray2.default)(scopes), (0, _toConsumableArray2.default)(requiredScopes))));\n}\n\nfunction shouldUseProxy() {\n  return _reactNative.Platform.select({\n    web: false,\n    default: _expoConstants.default.executionEnvironment === _expoConstants.ExecutionEnvironment.StoreClient\n  });\n}\n\nfunction invariantClientId(idName, value, providerName) {\n  if (typeof value === 'undefined') throw new Error(\"Client Id property `\" + idName + \"` must be defined to use \" + providerName + \" auth on this platform.\");\n}\n\nfunction useProxyEnabled(redirectUriOptions) {\n  return (0, _react.useMemo)(function () {\n    var _redirectUriOptions$u;\n\n    return (_redirectUriOptions$u = redirectUriOptions.useProxy) != null ? _redirectUriOptions$u : shouldUseProxy();\n  }, [redirectUriOptions.useProxy]);\n}","map":{"version":3,"sources":["../../src/providers/ProviderUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAIM,SAAU,mBAAV,GAA6E;EAAA,IAA/C,MAA+C,uEAA5B,EAA4B;EAAA,IAAxB,cAAwB;EAGjF,wCAAW,IAAI,GAAJ,4CAAY,MAAZ,oCAAuB,cAAvB,GAAX;AACD;;AAGK,SAAU,cAAV,GAAwB;EAC5B,OAAO,qBAAA,CAAS,MAAT,CAAgB;IACrB,GAAG,EAAE,KADgB;IAGrB,OAAO,EAAE,sBAAA,CAAU,oBAAV,KAAmC,mCAAA,CAAqB;EAH5C,CAAhB,CAAP;AAKD;;AAEK,SAAU,iBAAV,CAA4B,MAA5B,EAA4C,KAA5C,EAAwD,YAAxD,EAA4E;EAChF,IAAI,OAAO,KAAP,KAAiB,WAArB,EAEE,MAAM,IAAI,KAAJ,0BACoB,MADpB,iCACuD,YADvD,6BAAN;AAGH;;AAEK,SAAU,eAAV,CACJ,kBADI,EAC+D;EAEnE,OAAO,IAAA,cAAA,EACL;IAAA;;IAAA,gCAAM,kBAAkB,CAAC,QAAzB,oCAAqC,cAAc,EAAnD;EAAA,CADK,EAEL,CAAC,kBAAkB,CAAC,QAApB,CAFK,CAAP;AAID","sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { useMemo } from 'react';\nimport { Platform } from 'react-native';\n\nimport { AuthSessionRedirectUriOptions } from '../AuthSession';\n\nexport function applyRequiredScopes(scopes: string[] = [], requiredScopes: string[]): string[] {\n  // Add the required scopes for returning profile data.\n  // Remove duplicates\n  return [...new Set([...scopes, ...requiredScopes])];\n}\n\n// Only natively in the Expo client.\nexport function shouldUseProxy(): boolean {\n  return Platform.select({\n    web: false,\n    // Use the proxy in the Expo client.\n    default: Constants.executionEnvironment === ExecutionEnvironment.StoreClient,\n  });\n}\n\nexport function invariantClientId(idName: string, value: any, providerName: string) {\n  if (typeof value === 'undefined')\n    // TODO(Bacon): Add learn more\n    throw new Error(\n      `Client Id property \\`${idName}\\` must be defined to use ${providerName} auth on this platform.`\n    );\n}\n\nexport function useProxyEnabled(\n  redirectUriOptions: Pick<AuthSessionRedirectUriOptions, 'useProxy'>\n): boolean {\n  return useMemo(\n    () => redirectUriOptions.useProxy ?? shouldUseProxy(),\n    [redirectUriOptions.useProxy]\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}