{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthRequest = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar WebBrowser = _interopRequireWildcard(require(\"expo-web-browser\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AuthRequest = require(\"./AuthRequest.types\");\n\nvar _Errors = require(\"./Errors\");\n\nvar PKCE = _interopRequireWildcard(require(\"./PKCE\"));\n\nvar QueryParams = _interopRequireWildcard(require(\"./QueryParams\"));\n\nvar _SessionUrlProvider = _interopRequireDefault(require(\"./SessionUrlProvider\"));\n\nvar _TokenRequest = require(\"./TokenRequest\");\n\nvar _excluded = [\"url\", \"proxyOptions\"],\n    _excluded2 = [\"useProxy\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar _authLock = false;\n\nvar AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n\n    (0, _classCallCheck2.default)(this, AuthRequest);\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : _AuthRequest.ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandom(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : _AuthRequest.CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");\n      }\n\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");\n      }\n\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");\n      }\n    }\n\n    (0, _invariant.default)(this.codeChallengeMethod !== _AuthRequest.CodeChallengeMethod.Plain, \"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");\n    (0, _invariant.default)(this.redirectUri, \"`AuthRequest` requires a valid `redirectUri`. Ex: \" + _reactNative.Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    }));\n  }\n\n  (0, _createClass2.default)(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      return _regenerator.default.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.usePKCE) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(this.ensureCodeIsSetupAsync());\n\n            case 3:\n              return _context.abrupt(\"return\", {\n                responseType: this.responseType,\n                clientId: this.clientId,\n                redirectUri: this.redirectUri,\n                scopes: this.scopes,\n                clientSecret: this.clientSecret,\n                codeChallenge: this.codeChallenge,\n                codeChallengeMethod: this.codeChallengeMethod,\n                prompt: this.prompt,\n                state: this.state,\n                extraParams: this.extraParams,\n                usePKCE: this.usePKCE\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"promptAsync\",\n    value: function promptAsync(discovery) {\n      var _ref,\n          url,\n          proxyOptions,\n          options,\n          startUrl,\n          returnUrl,\n          result,\n          useProxy,\n          openOptions,\n          _args2 = arguments;\n\n      return _regenerator.default.async(function promptAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, url = _ref.url, proxyOptions = _ref.proxyOptions, options = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n              if (url) {\n                _context2.next = 15;\n                break;\n              }\n\n              if (this.url) {\n                _context2.next = 14;\n                break;\n              }\n\n              _context2.t0 = this;\n              _context2.t1 = discovery;\n              _context2.t2 = _extends2.default;\n              _context2.t3 = {};\n              _context2.t4 = options;\n              _context2.next = 10;\n              return _regenerator.default.awrap(this.makeAuthUrlAsync(discovery));\n\n            case 10:\n              _context2.t5 = _context2.sent;\n              _context2.t6 = {\n                url: _context2.t5\n              };\n              _context2.t7 = (0, _context2.t2)(_context2.t3, _context2.t4, _context2.t6);\n              return _context2.abrupt(\"return\", _context2.t0.promptAsync.call(_context2.t0, _context2.t1, _context2.t7));\n\n            case 14:\n              url = this.url;\n\n            case 15:\n              (0, _invariant.default)(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n              startUrl = url;\n              returnUrl = this.redirectUri;\n\n              if (options.useProxy) {\n                returnUrl = _SessionUrlProvider.default.getDefaultReturnUrl(proxyOptions == null ? void 0 : proxyOptions.path, proxyOptions);\n                startUrl = _SessionUrlProvider.default.getStartUrl(url, returnUrl);\n              }\n\n              if (!_authLock) {\n                _context2.next = 22;\n                break;\n              }\n\n              if (__DEV__) {\n                console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n              }\n\n              return _context2.abrupt(\"return\", {\n                type: 'locked'\n              });\n\n            case 22:\n              _authLock = true;\n              _context2.prev = 23;\n              useProxy = options.useProxy, openOptions = (0, _objectWithoutProperties2.default)(options, _excluded2);\n              _context2.next = 27;\n              return _regenerator.default.awrap(WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions));\n\n            case 27:\n              result = _context2.sent;\n\n            case 28:\n              _context2.prev = 28;\n              _authLock = false;\n              return _context2.finish(28);\n\n            case 31:\n              if (!(result.type === 'opened')) {\n                _context2.next = 33;\n                break;\n              }\n\n              throw new Error('An unexpected error occurred');\n\n            case 33:\n              if (!(result.type !== 'success')) {\n                _context2.next = 35;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                type: result.type\n              });\n\n            case 35:\n              return _context2.abrupt(\"return\", this.parseReturnUrl(result.url));\n\n            case 36:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[23,, 28, 31]], Promise);\n    }\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n          params = _QueryParams$getQuery.params,\n          errorCode = _QueryParams$getQuery.errorCode;\n\n      var state = params.state,\n          _params$error = params.error,\n          error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n\n      if (state !== this.state) {\n        parsedError = new _Errors.AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new _Errors.AuthError((0, _extends2.default)({\n          error: error\n        }, params));\n      }\n\n      if (params.access_token) {\n        authentication = _TokenRequest.TokenResponse.fromQueryParams(params);\n      }\n\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: function makeAuthUrlAsync(discovery) {\n      var _request$scopes;\n\n      var request, params, extra, query;\n      return _regenerator.default.async(function makeAuthUrlAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(this.getAuthRequestConfigAsync());\n\n            case 2:\n              request = _context3.sent;\n\n              if (request.state) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('Cannot make request URL without a valid `state` loaded');\n\n            case 5:\n              params = {};\n\n              if (request.codeChallenge) {\n                params.code_challenge = request.codeChallenge;\n              }\n\n              for (extra in request.extraParams) {\n                if (extra in request.extraParams) {\n                  params[extra] = request.extraParams[extra];\n                }\n              }\n\n              if (request.usePKCE && request.codeChallengeMethod) {\n                params.code_challenge_method = request.codeChallengeMethod;\n              }\n\n              if (request.clientSecret) {\n                params.client_secret = request.clientSecret;\n              }\n\n              if (request.prompt) {\n                params.prompt = request.prompt;\n              }\n\n              params.redirect_uri = request.redirectUri;\n              params.client_id = request.clientId;\n              params.response_type = request.responseType;\n              params.state = request.state;\n\n              if ((_request$scopes = request.scopes) != null && _request$scopes.length) {\n                params.scope = request.scopes.join(' ');\n              }\n\n              query = QueryParams.buildQueryString(params);\n              this.url = discovery.authorizationEndpoint + \"?\" + query;\n              return _context3.abrupt(\"return\", this.url);\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function ensureCodeIsSetupAsync() {\n      var _await$PKCE$buildCode, codeVerifier, codeChallenge;\n\n      return _regenerator.default.async(function ensureCodeIsSetupAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.codeVerifier) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              _context4.next = 4;\n              return _regenerator.default.awrap(PKCE.buildCodeAsync());\n\n            case 4:\n              _await$PKCE$buildCode = _context4.sent;\n              codeVerifier = _await$PKCE$buildCode.codeVerifier;\n              codeChallenge = _await$PKCE$buildCode.codeChallenge;\n              this.codeVerifier = codeVerifier;\n              this.codeChallenge = codeChallenge;\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return AuthRequest;\n}();\n\nexports.AuthRequest = AuthRequest;","map":{"version":3,"sources":["../src/AuthRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n/**\n * Implements an authorization request.\n *\n * [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, proxyOptions, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions?.path, proxyOptions);\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}